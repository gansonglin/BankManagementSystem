#pragma once
#include <winsock.h>
#include <QString>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	此类可能是客户端 socket 类  . </summary>
///
/// <remarks>	gsl, 2017/5/22. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class Socket
{
public:
	Socket();
	~Socket();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	创建一个套接字 . </summary>
	///
	/// <remarks>	gsl, 2017/5/22. </remarks>
	///
	/// <returns>	An int. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int create();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Binds this object. </summary>
	///
	/// <remarks>	gsl, 2017/5/22. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void bind(int port = 8000);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Constructor. </summary>
	///
	/// <remarks>	gsl, 2017/5/22. </remarks>
	///
	/// <param name="ip">  	[in,out] The IP. </param>
	/// <param name="port">	The port. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool connect(QString & ip , int port = 80000);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	监听. </summary>
	///
	/// <remarks>	gsl, 2017/5/22. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void listen(int count = 0);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	接收 . </summary>
	///
	/// <remarks>	gsl, 2017/5/22. </remarks>
	///
	/// <param name="s">	[in,out] If non-null, the Socket to process. </param>
	///
	/// <returns>	A SOCKET. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	SOCKET accept(Socket *socket);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	发送 . </summary>
	///
	/// <remarks>	gsl, 2017/5/22. </remarks>
	///
	/// <param name="buf">	The buffer. </param>
	///
	/// <returns>	An int. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int send(const char buf[]);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	接收 . </summary>
	///
	/// <remarks>	gsl, 2017/5/22. </remarks>
	///
	/// <param name="buf">	The buffer. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int recv(char buf[]);
private:

	/// <summary>	客户端socket . </summary>
	SOCKET _socket;

	/// <summary>	服务器与客户端连接后新建立的socket . </summary>
	SOCKET _connectSocket;

	/// <summary>	The address client. </summary>
	SOCKADDR_IN  _addrClient;

	/// <summary>	0、 客户端类 ，1、服务端类  . </summary>
	int _flag;
};

